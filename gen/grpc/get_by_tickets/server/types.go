// Code generated by goa v3.18.2, DO NOT EDIT.
//
// get by tickets gRPC server types
//
// Command:
// $ goa gen go-scores/design

package server

import (
	getbytickets "go-scores/gen/get_by_tickets"
	get_by_ticketspb "go-scores/gen/grpc/get_by_tickets/pb"

	goa "goa.design/goa/v3/pkg"
)

// NewGetAggregatedScoresByTicketPayload builds the payload of the
// "getAggregatedScoresByTicket" endpoint of the "get by tickets" service from
// the gRPC request type.
func NewGetAggregatedScoresByTicketPayload(message *get_by_ticketspb.GetAggregatedScoresByTicketRequest) *getbytickets.GetAggregatedScoresByTicketPayload {
	v := &getbytickets.GetAggregatedScoresByTicketPayload{
		From: message.From,
		To:   message.To,
	}
	return v
}

// NewProtoGetAggregatedScoresByTicketResponse builds the gRPC response type
// from the result of the "getAggregatedScoresByTicket" endpoint of the "get by
// tickets" service.
func NewProtoGetAggregatedScoresByTicketResponse(result *getbytickets.GetAggregatedScoresByTicketResult) *get_by_ticketspb.GetAggregatedScoresByTicketResponse {
	message := &get_by_ticketspb.GetAggregatedScoresByTicketResponse{}
	if result.Meta != nil {
		message.Meta = svcGetbyticketsTicketMetaToGetByTicketspbTicketMeta(result.Meta)
	}
	if result.Data != nil {
		message.Data = make([]*get_by_ticketspb.TicketScore, len(result.Data))
		for i, val := range result.Data {
			message.Data[i] = &get_by_ticketspb.TicketScore{}
			if val.TicketID != nil {
				ticketID := int32(*val.TicketID)
				message.Data[i].TicketId = &ticketID
			}
			if val.Categories != nil {
				message.Data[i].Categories = make([]*get_by_ticketspb.CategoryScoreDetail, len(val.Categories))
				for j, val := range val.Categories {
					message.Data[i].Categories[j] = &get_by_ticketspb.CategoryScoreDetail{
						Score: val.Score,
					}
					if val.ID != nil {
						id := int32(*val.ID)
						message.Data[i].Categories[j].Id = &id
					}
				}
			}
		}
	}
	return message
}

// ValidateGetAggregatedScoresByTicketRequest runs the validations defined on
// GetAggregatedScoresByTicketRequest.
func ValidateGetAggregatedScoresByTicketRequest(message *get_by_ticketspb.GetAggregatedScoresByTicketRequest) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.from", message.From, goa.FormatDate))
	err = goa.MergeErrors(err, goa.ValidatePattern("message.from", message.From, "^\\d{4}-\\d{2}-\\d{2}$"))
	err = goa.MergeErrors(err, goa.ValidateFormat("message.to", message.To, goa.FormatDate))
	err = goa.MergeErrors(err, goa.ValidatePattern("message.to", message.To, "^\\d{4}-\\d{2}-\\d{2}$"))
	return
}

// svcGetbyticketsTicketMetaToGetByTicketspbTicketMeta builds a value of type
// *get_by_ticketspb.TicketMeta from a value of type *getbytickets.TicketMeta.
func svcGetbyticketsTicketMetaToGetByTicketspbTicketMeta(v *getbytickets.TicketMeta) *get_by_ticketspb.TicketMeta {
	res := &get_by_ticketspb.TicketMeta{}
	if v.Categories != nil {
		res.Categories = make([]*get_by_ticketspb.Category, len(v.Categories))
		for i, val := range v.Categories {
			res.Categories[i] = &get_by_ticketspb.Category{
				Name: val.Name,
			}
			if val.ID != nil {
				id := int32(*val.ID)
				res.Categories[i].Id = &id
			}
		}
	}

	return res
}

// protobufGetByTicketspbTicketMetaToGetbyticketsTicketMeta builds a value of
// type *getbytickets.TicketMeta from a value of type
// *get_by_ticketspb.TicketMeta.
func protobufGetByTicketspbTicketMetaToGetbyticketsTicketMeta(v *get_by_ticketspb.TicketMeta) *getbytickets.TicketMeta {
	res := &getbytickets.TicketMeta{}
	if v.Categories != nil {
		res.Categories = make([]*getbytickets.Category, len(v.Categories))
		for i, val := range v.Categories {
			res.Categories[i] = &getbytickets.Category{
				Name: val.Name,
			}
			if val.Id != nil {
				id := int(*val.Id)
				res.Categories[i].ID = &id
			}
		}
	}

	return res
}
