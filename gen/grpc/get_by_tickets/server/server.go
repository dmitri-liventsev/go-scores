// Code generated by goa v3.18.2, DO NOT EDIT.
//
// get by tickets gRPC server
//
// Command:
// $ goa gen go-scores/design

package server

import (
	"context"
	getbytickets "go-scores/gen/get_by_tickets"
	get_by_ticketspb "go-scores/gen/grpc/get_by_tickets/pb"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the get_by_ticketspb.GetByTicketsServer interface.
type Server struct {
	GetAggregatedScoresByTicketH goagrpc.UnaryHandler
	get_by_ticketspb.UnimplementedGetByTicketsServer
}

// New instantiates the server struct with the get by tickets service endpoints.
func New(e *getbytickets.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		GetAggregatedScoresByTicketH: NewGetAggregatedScoresByTicketHandler(e.GetAggregatedScoresByTicket, uh),
	}
}

// NewGetAggregatedScoresByTicketHandler creates a gRPC handler which serves
// the "get by tickets" service "getAggregatedScoresByTicket" endpoint.
func NewGetAggregatedScoresByTicketHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetAggregatedScoresByTicketRequest, EncodeGetAggregatedScoresByTicketResponse)
	}
	return h
}

// GetAggregatedScoresByTicket implements the "GetAggregatedScoresByTicket"
// method in get_by_ticketspb.GetByTicketsServer interface.
func (s *Server) GetAggregatedScoresByTicket(ctx context.Context, message *get_by_ticketspb.GetAggregatedScoresByTicketRequest) (*get_by_ticketspb.GetAggregatedScoresByTicketResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "getAggregatedScoresByTicket")
	ctx = context.WithValue(ctx, goa.ServiceKey, "get by tickets")
	resp, err := s.GetAggregatedScoresByTicketH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*get_by_ticketspb.GetAggregatedScoresByTicketResponse), nil
}
