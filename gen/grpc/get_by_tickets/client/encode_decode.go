// Code generated by goa v3.18.2, DO NOT EDIT.
//
// get by tickets gRPC client encoders and decoders
//
// Command:
// $ goa gen go-scores/design

package client

import (
	"context"
	getbytickets "go-scores/gen/get_by_tickets"
	get_by_ticketspb "go-scores/gen/grpc/get_by_tickets/pb"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildGetAggregatedScoresByTicketFunc builds the remote method to invoke for
// "get by tickets" service "getAggregatedScoresByTicket" endpoint.
func BuildGetAggregatedScoresByTicketFunc(grpccli get_by_ticketspb.GetByTicketsClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetAggregatedScoresByTicket(ctx, reqpb.(*get_by_ticketspb.GetAggregatedScoresByTicketRequest), opts...)
		}
		return grpccli.GetAggregatedScoresByTicket(ctx, &get_by_ticketspb.GetAggregatedScoresByTicketRequest{}, opts...)
	}
}

// EncodeGetAggregatedScoresByTicketRequest encodes requests sent to get by
// tickets getAggregatedScoresByTicket endpoint.
func EncodeGetAggregatedScoresByTicketRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*getbytickets.GetAggregatedScoresByTicketPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("get by tickets", "getAggregatedScoresByTicket", "*getbytickets.GetAggregatedScoresByTicketPayload", v)
	}
	return NewProtoGetAggregatedScoresByTicketRequest(payload), nil
}

// DecodeGetAggregatedScoresByTicketResponse decodes responses from the get by
// tickets getAggregatedScoresByTicket endpoint.
func DecodeGetAggregatedScoresByTicketResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*get_by_ticketspb.GetAggregatedScoresByTicketResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("get by tickets", "getAggregatedScoresByTicket", "*get_by_ticketspb.GetAggregatedScoresByTicketResponse", v)
	}
	if err := ValidateGetAggregatedScoresByTicketResponse(message); err != nil {
		return nil, err
	}
	res := NewGetAggregatedScoresByTicketResult(message)
	return res, nil
}
