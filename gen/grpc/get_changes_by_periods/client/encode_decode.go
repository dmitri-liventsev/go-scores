// Code generated by goa v3.18.2, DO NOT EDIT.
//
// get changes by periods gRPC client encoders and decoders
//
// Command:
// $ goa gen go-scores/design

package client

import (
	"context"
	getchangesbyperiods "go-scores/gen/get_changes_by_periods"
	get_changes_by_periodspb "go-scores/gen/grpc/get_changes_by_periods/pb"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildGetChangesByPeriodsFunc builds the remote method to invoke for "get
// changes by periods" service "getChangesByPeriods" endpoint.
func BuildGetChangesByPeriodsFunc(grpccli get_changes_by_periodspb.GetChangesByPeriodsClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetChangesByPeriods(ctx, reqpb.(*get_changes_by_periodspb.GetChangesByPeriodsRequest), opts...)
		}
		return grpccli.GetChangesByPeriods(ctx, &get_changes_by_periodspb.GetChangesByPeriodsRequest{}, opts...)
	}
}

// EncodeGetChangesByPeriodsRequest encodes requests sent to get changes by
// periods getChangesByPeriods endpoint.
func EncodeGetChangesByPeriodsRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*getchangesbyperiods.GetChangesByPeriodsPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("get changes by periods", "getChangesByPeriods", "*getchangesbyperiods.GetChangesByPeriodsPayload", v)
	}
	return NewProtoGetChangesByPeriodsRequest(payload), nil
}

// DecodeGetChangesByPeriodsResponse decodes responses from the get changes by
// periods getChangesByPeriods endpoint.
func DecodeGetChangesByPeriodsResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*get_changes_by_periodspb.GetChangesByPeriodsResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("get changes by periods", "getChangesByPeriods", "*get_changes_by_periodspb.GetChangesByPeriodsResponse", v)
	}
	if err := ValidateGetChangesByPeriodsResponse(message); err != nil {
		return nil, err
	}
	res := NewGetChangesByPeriodsResult(message)
	return res, nil
}
