// Code generated by goa v3.18.2, DO NOT EDIT.
//
// get overall gRPC client encoders and decoders
//
// Command:
// $ goa gen go-scores/design

package client

import (
	"context"
	getoverall "go-scores/gen/get_overall"
	get_overallpb "go-scores/gen/grpc/get_overall/pb"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildGetOverallScoreFunc builds the remote method to invoke for "get
// overall" service "getOverallScore" endpoint.
func BuildGetOverallScoreFunc(grpccli get_overallpb.GetOverallClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetOverallScore(ctx, reqpb.(*get_overallpb.GetOverallScoreRequest), opts...)
		}
		return grpccli.GetOverallScore(ctx, &get_overallpb.GetOverallScoreRequest{}, opts...)
	}
}

// EncodeGetOverallScoreRequest encodes requests sent to get overall
// getOverallScore endpoint.
func EncodeGetOverallScoreRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*getoverall.GetOverallScorePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("get overall", "getOverallScore", "*getoverall.GetOverallScorePayload", v)
	}
	return NewProtoGetOverallScoreRequest(payload), nil
}

// DecodeGetOverallScoreResponse decodes responses from the get overall
// getOverallScore endpoint.
func DecodeGetOverallScoreResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*get_overallpb.GetOverallScoreResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("get overall", "getOverallScore", "*get_overallpb.GetOverallScoreResponse", v)
	}
	res := NewGetOverallScoreResult(message)
	return res, nil
}
