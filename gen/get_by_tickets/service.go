// Code generated by goa v3.18.2, DO NOT EDIT.
//
// get by tickets service
//
// Command:
// $ goa gen go-scores/design

package getbytickets

import (
	"context"
)

// Aggregate scores for categories within defined period by ticket
type Service interface {
	// Get aggregate category scores by ticket for a specified period.
	GetAggregatedScoresByTicket(context.Context, *GetAggregatedScoresByTicketPayload) (res *GetAggregatedScoresByTicketResult, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "get overall"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "get by tickets"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"getAggregatedScoresByTicket"}

type Category struct {
	ID   *int
	Name *string
}

type CategoryScoreDetail struct {
	ID    *int
	Score *float32
}

// GetAggregatedScoresByTicketPayload is the payload type of the get by tickets
// service getAggregatedScoresByTicket method.
type GetAggregatedScoresByTicketPayload struct {
	// Start date (YYYY-MM-DD)
	From string
	// End date (YYYY-MM-DD)
	To string
}

// GetAggregatedScoresByTicketResult is the result type of the get by tickets
// service getAggregatedScoresByTicket method.
type GetAggregatedScoresByTicketResult struct {
	Meta *TicketMeta
	Data []*TicketScore
}

type TicketMeta struct {
	Categories []*Category
}

type TicketScore struct {
	TicketID   *int
	Categories []*CategoryScoreDetail
}
