// Code generated by goa v3.18.2, DO NOT EDIT.
//
// get by categories HTTP client encoders and decoders
//
// Command:
// $ goa gen go-scores/design

package client

import (
	"bytes"
	"context"
	getbycategories "go-scores/gen/get_by_categories"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetAggregatedScoresRequest instantiates a HTTP request object with
// method and path set to call the "get by categories" service
// "getAggregatedScores" endpoint
func (c *Client) BuildGetAggregatedScoresRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		from string
		to   string
	)
	{
		p, ok := v.(*getbycategories.GetAggregatedScoresPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("get by categories", "getAggregatedScores", "*getbycategories.GetAggregatedScoresPayload", v)
		}
		from = p.From
		to = p.To
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAggregatedScoresGetByCategoriesPath(from, to)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("get by categories", "getAggregatedScores", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetAggregatedScoresResponse returns a decoder for responses returned
// by the get by categories getAggregatedScores endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeGetAggregatedScoresResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAggregatedScoresResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("get by categories", "getAggregatedScores", err)
			}
			err = ValidateGetAggregatedScoresResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("get by categories", "getAggregatedScores", err)
			}
			res := NewGetAggregatedScoresResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("get by categories", "getAggregatedScores", resp.StatusCode, string(body))
		}
	}
}

// unmarshalCategoryMetaResponseBodyToGetbycategoriesCategoryMeta builds a
// value of type *getbycategories.CategoryMeta from a value of type
// *CategoryMetaResponseBody.
func unmarshalCategoryMetaResponseBodyToGetbycategoriesCategoryMeta(v *CategoryMetaResponseBody) *getbycategories.CategoryMeta {
	res := &getbycategories.CategoryMeta{}
	if v.Periods != nil {
		res.Periods = make([]*getbycategories.Period, len(v.Periods))
		for i, val := range v.Periods {
			res.Periods[i] = unmarshalPeriodResponseBodyToGetbycategoriesPeriod(val)
		}
	}
	if v.Categories != nil {
		res.Categories = make([]*getbycategories.Category, len(v.Categories))
		for i, val := range v.Categories {
			res.Categories[i] = unmarshalCategoryResponseBodyToGetbycategoriesCategory(val)
		}
	}

	return res
}

// unmarshalPeriodResponseBodyToGetbycategoriesPeriod builds a value of type
// *getbycategories.Period from a value of type *PeriodResponseBody.
func unmarshalPeriodResponseBodyToGetbycategoriesPeriod(v *PeriodResponseBody) *getbycategories.Period {
	if v == nil {
		return nil
	}
	res := &getbycategories.Period{
		ID:    v.ID,
		Start: v.Start,
		End:   v.End,
	}

	return res
}

// unmarshalCategoryResponseBodyToGetbycategoriesCategory builds a value of
// type *getbycategories.Category from a value of type *CategoryResponseBody.
func unmarshalCategoryResponseBodyToGetbycategoriesCategory(v *CategoryResponseBody) *getbycategories.Category {
	if v == nil {
		return nil
	}
	res := &getbycategories.Category{
		ID:   v.ID,
		Name: v.Name,
	}

	return res
}

// unmarshalCategoryScoreResponseBodyToGetbycategoriesCategoryScore builds a
// value of type *getbycategories.CategoryScore from a value of type
// *CategoryScoreResponseBody.
func unmarshalCategoryScoreResponseBodyToGetbycategoriesCategoryScore(v *CategoryScoreResponseBody) *getbycategories.CategoryScore {
	res := &getbycategories.CategoryScore{
		CategoryID:   v.CategoryID,
		NumOfReviews: v.NumOfReviews,
		TotalScore:   v.TotalScore,
	}
	if v.Periods != nil {
		res.Periods = make([]*getbycategories.ScorePeriod, len(v.Periods))
		for i, val := range v.Periods {
			res.Periods[i] = unmarshalScorePeriodResponseBodyToGetbycategoriesScorePeriod(val)
		}
	}

	return res
}

// unmarshalScorePeriodResponseBodyToGetbycategoriesScorePeriod builds a value
// of type *getbycategories.ScorePeriod from a value of type
// *ScorePeriodResponseBody.
func unmarshalScorePeriodResponseBodyToGetbycategoriesScorePeriod(v *ScorePeriodResponseBody) *getbycategories.ScorePeriod {
	if v == nil {
		return nil
	}
	res := &getbycategories.ScorePeriod{
		ID:    v.ID,
		Score: v.Score,
	}

	return res
}
