// Code generated by goa v3.18.2, DO NOT EDIT.
//
// get by categories HTTP server encoders and decoders
//
// Command:
// $ goa gen go-scores/design

package server

import (
	"context"
	getbycategories "go-scores/gen/get_by_categories"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetAggregatedScoresResponse returns an encoder for responses returned
// by the get by categories getAggregatedScores endpoint.
func EncodeGetAggregatedScoresResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*getbycategories.GetAggregatedScoresResult)
		enc := encoder(ctx, w)
		body := NewGetAggregatedScoresResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetAggregatedScoresRequest returns a decoder for requests sent to the
// get by categories getAggregatedScores endpoint.
func DecodeGetAggregatedScoresRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			from string
			to   string
			err  error

			params = mux.Vars(r)
		)
		from = params["from"]
		err = goa.MergeErrors(err, goa.ValidateFormat("from", from, goa.FormatDate))
		err = goa.MergeErrors(err, goa.ValidatePattern("from", from, "^\\d{4}-\\d{2}-\\d{2}$"))
		to = params["to"]
		err = goa.MergeErrors(err, goa.ValidateFormat("to", to, goa.FormatDate))
		err = goa.MergeErrors(err, goa.ValidatePattern("to", to, "^\\d{4}-\\d{2}-\\d{2}$"))
		if err != nil {
			return nil, err
		}
		payload := NewGetAggregatedScoresPayload(from, to)

		return payload, nil
	}
}

// marshalGetbycategoriesCategoryMetaToCategoryMetaResponseBody builds a value
// of type *CategoryMetaResponseBody from a value of type
// *getbycategories.CategoryMeta.
func marshalGetbycategoriesCategoryMetaToCategoryMetaResponseBody(v *getbycategories.CategoryMeta) *CategoryMetaResponseBody {
	res := &CategoryMetaResponseBody{}
	if v.Periods != nil {
		res.Periods = make([]*PeriodResponseBody, len(v.Periods))
		for i, val := range v.Periods {
			res.Periods[i] = marshalGetbycategoriesPeriodToPeriodResponseBody(val)
		}
	}
	if v.Categories != nil {
		res.Categories = make([]*CategoryResponseBody, len(v.Categories))
		for i, val := range v.Categories {
			res.Categories[i] = marshalGetbycategoriesCategoryToCategoryResponseBody(val)
		}
	}

	return res
}

// marshalGetbycategoriesPeriodToPeriodResponseBody builds a value of type
// *PeriodResponseBody from a value of type *getbycategories.Period.
func marshalGetbycategoriesPeriodToPeriodResponseBody(v *getbycategories.Period) *PeriodResponseBody {
	if v == nil {
		return nil
	}
	res := &PeriodResponseBody{
		ID:    v.ID,
		Start: v.Start,
		End:   v.End,
	}

	return res
}

// marshalGetbycategoriesCategoryToCategoryResponseBody builds a value of type
// *CategoryResponseBody from a value of type *getbycategories.Category.
func marshalGetbycategoriesCategoryToCategoryResponseBody(v *getbycategories.Category) *CategoryResponseBody {
	if v == nil {
		return nil
	}
	res := &CategoryResponseBody{
		ID:   v.ID,
		Name: v.Name,
	}

	return res
}

// marshalGetbycategoriesCategoryScoreToCategoryScoreResponseBody builds a
// value of type *CategoryScoreResponseBody from a value of type
// *getbycategories.CategoryScore.
func marshalGetbycategoriesCategoryScoreToCategoryScoreResponseBody(v *getbycategories.CategoryScore) *CategoryScoreResponseBody {
	res := &CategoryScoreResponseBody{
		CategoryID:   v.CategoryID,
		NumOfReviews: v.NumOfReviews,
		TotalScore:   v.TotalScore,
	}
	if v.Periods != nil {
		res.Periods = make([]*ScorePeriodResponseBody, len(v.Periods))
		for i, val := range v.Periods {
			res.Periods[i] = marshalGetbycategoriesScorePeriodToScorePeriodResponseBody(val)
		}
	}

	return res
}

// marshalGetbycategoriesScorePeriodToScorePeriodResponseBody builds a value of
// type *ScorePeriodResponseBody from a value of type
// *getbycategories.ScorePeriod.
func marshalGetbycategoriesScorePeriodToScorePeriodResponseBody(v *getbycategories.ScorePeriod) *ScorePeriodResponseBody {
	if v == nil {
		return nil
	}
	res := &ScorePeriodResponseBody{
		ID:    v.ID,
		Score: v.Score,
	}

	return res
}
