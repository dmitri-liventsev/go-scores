// Code generated by goa v3.18.2, DO NOT EDIT.
//
// get by periods HTTP client encoders and decoders
//
// Command:
// $ goa gen go-scores/design

package client

import (
	"bytes"
	"context"
	getbyperiods "go-scores/gen/get_by_periods"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetByPeriodsRequest instantiates a HTTP request object with method and
// path set to call the "get by periods" service "getByPeriods" endpoint
func (c *Client) BuildGetByPeriodsRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		period string
	)
	{
		p, ok := v.(*getbyperiods.GetByPeriodsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("get by periods", "getByPeriods", "*getbyperiods.GetByPeriodsPayload", v)
		}
		period = p.Period
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetByPeriodsGetByPeriodsPath(period)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("get by periods", "getByPeriods", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetByPeriodsResponse returns a decoder for responses returned by the
// get by periods getByPeriods endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeGetByPeriodsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetByPeriodsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("get by periods", "getByPeriods", err)
			}
			err = ValidateGetByPeriodsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("get by periods", "getByPeriods", err)
			}
			res := NewGetByPeriodsResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("get by periods", "getByPeriods", resp.StatusCode, string(body))
		}
	}
}

// unmarshalPeriodsMetaResponseBodyToGetbyperiodsPeriodsMeta builds a value of
// type *getbyperiods.PeriodsMeta from a value of type *PeriodsMetaResponseBody.
func unmarshalPeriodsMetaResponseBodyToGetbyperiodsPeriodsMeta(v *PeriodsMetaResponseBody) *getbyperiods.PeriodsMeta {
	res := &getbyperiods.PeriodsMeta{}
	if v.Periods != nil {
		res.Periods = make([]*getbyperiods.Period, len(v.Periods))
		for i, val := range v.Periods {
			res.Periods[i] = unmarshalPeriodResponseBodyToGetbyperiodsPeriod(val)
		}
	}

	return res
}

// unmarshalPeriodResponseBodyToGetbyperiodsPeriod builds a value of type
// *getbyperiods.Period from a value of type *PeriodResponseBody.
func unmarshalPeriodResponseBodyToGetbyperiodsPeriod(v *PeriodResponseBody) *getbyperiods.Period {
	if v == nil {
		return nil
	}
	res := &getbyperiods.Period{
		ID:    v.ID,
		Start: v.Start,
		End:   v.End,
	}

	return res
}

// unmarshalPeriodScoreChangeResponseBodyToGetbyperiodsPeriodScoreChange builds
// a value of type *getbyperiods.PeriodScoreChange from a value of type
// *PeriodScoreChangeResponseBody.
func unmarshalPeriodScoreChangeResponseBodyToGetbyperiodsPeriodScoreChange(v *PeriodScoreChangeResponseBody) *getbyperiods.PeriodScoreChange {
	res := &getbyperiods.PeriodScoreChange{
		PeriodID:  v.PeriodID,
		ScoreDiff: v.ScoreDiff,
	}

	return res
}
