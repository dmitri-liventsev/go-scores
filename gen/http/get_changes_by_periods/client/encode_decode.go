// Code generated by goa v3.18.2, DO NOT EDIT.
//
// get changes by periods HTTP client encoders and decoders
//
// Command:
// $ goa gen go-scores/design

package client

import (
	"bytes"
	"context"
	getchangesbyperiods "go-scores/gen/get_changes_by_periods"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetChangesByPeriodsRequest instantiates a HTTP request object with
// method and path set to call the "get changes by periods" service
// "getChangesByPeriods" endpoint
func (c *Client) BuildGetChangesByPeriodsRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		period string
	)
	{
		p, ok := v.(*getchangesbyperiods.GetChangesByPeriodsPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("get changes by periods", "getChangesByPeriods", "*getchangesbyperiods.GetChangesByPeriodsPayload", v)
		}
		period = p.Period
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetChangesByPeriodsGetChangesByPeriodsPath(period)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("get changes by periods", "getChangesByPeriods", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetChangesByPeriodsResponse returns a decoder for responses returned
// by the get changes by periods getChangesByPeriods endpoint. restoreBody
// controls whether the response body should be restored after having been read.
func DecodeGetChangesByPeriodsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetChangesByPeriodsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("get changes by periods", "getChangesByPeriods", err)
			}
			err = ValidateGetChangesByPeriodsResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("get changes by periods", "getChangesByPeriods", err)
			}
			res := NewGetChangesByPeriodsResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("get changes by periods", "getChangesByPeriods", resp.StatusCode, string(body))
		}
	}
}

// unmarshalPeriodsMetaResponseBodyToGetchangesbyperiodsPeriodsMeta builds a
// value of type *getchangesbyperiods.PeriodsMeta from a value of type
// *PeriodsMetaResponseBody.
func unmarshalPeriodsMetaResponseBodyToGetchangesbyperiodsPeriodsMeta(v *PeriodsMetaResponseBody) *getchangesbyperiods.PeriodsMeta {
	res := &getchangesbyperiods.PeriodsMeta{}
	if v.Periods != nil {
		res.Periods = make([]*getchangesbyperiods.Period, len(v.Periods))
		for i, val := range v.Periods {
			res.Periods[i] = unmarshalPeriodResponseBodyToGetchangesbyperiodsPeriod(val)
		}
	}

	return res
}

// unmarshalPeriodResponseBodyToGetchangesbyperiodsPeriod builds a value of
// type *getchangesbyperiods.Period from a value of type *PeriodResponseBody.
func unmarshalPeriodResponseBodyToGetchangesbyperiodsPeriod(v *PeriodResponseBody) *getchangesbyperiods.Period {
	if v == nil {
		return nil
	}
	res := &getchangesbyperiods.Period{
		ID:    v.ID,
		Start: v.Start,
		End:   v.End,
	}

	return res
}

// unmarshalPeriodScoreDeltaResponseBodyToGetchangesbyperiodsPeriodScoreDelta
// builds a value of type *getchangesbyperiods.PeriodScoreDelta from a value of
// type *PeriodScoreDeltaResponseBody.
func unmarshalPeriodScoreDeltaResponseBodyToGetchangesbyperiodsPeriodScoreDelta(v *PeriodScoreDeltaResponseBody) *getchangesbyperiods.PeriodScoreDelta {
	res := &getchangesbyperiods.PeriodScoreDelta{
		PeriodID:   v.PeriodID,
		ScoreDelta: v.ScoreDelta,
	}

	return res
}
