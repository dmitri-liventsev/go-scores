// Code generated by goa v3.18.2, DO NOT EDIT.
//
// get by tickets HTTP server encoders and decoders
//
// Command:
// $ goa gen go-scores/design

package server

import (
	"context"
	getbytickets "go-scores/gen/get_by_tickets"
	"net/http"

	goahttp "goa.design/goa/v3/http"
)

// EncodeGetAggregatedScoresByTicketResponse returns an encoder for responses
// returned by the get by tickets getAggregatedScoresByTicket endpoint.
func EncodeGetAggregatedScoresByTicketResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*getbytickets.GetAggregatedScoresByTicketResult)
		enc := encoder(ctx, w)
		body := NewGetAggregatedScoresByTicketResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetAggregatedScoresByTicketRequest returns a decoder for requests sent
// to the get by tickets getAggregatedScoresByTicket endpoint.
func DecodeGetAggregatedScoresByTicketRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			from string
			to   string

			params = mux.Vars(r)
		)
		from = params["from"]
		to = params["to"]
		payload := NewGetAggregatedScoresByTicketPayload(from, to)

		return payload, nil
	}
}

// marshalGetbyticketsTicketMetaToTicketMetaResponseBody builds a value of type
// *TicketMetaResponseBody from a value of type *getbytickets.TicketMeta.
func marshalGetbyticketsTicketMetaToTicketMetaResponseBody(v *getbytickets.TicketMeta) *TicketMetaResponseBody {
	res := &TicketMetaResponseBody{}
	if v.Categories != nil {
		res.Categories = make([]*CategoryResponseBody, len(v.Categories))
		for i, val := range v.Categories {
			res.Categories[i] = marshalGetbyticketsCategoryToCategoryResponseBody(val)
		}
	}

	return res
}

// marshalGetbyticketsCategoryToCategoryResponseBody builds a value of type
// *CategoryResponseBody from a value of type *getbytickets.Category.
func marshalGetbyticketsCategoryToCategoryResponseBody(v *getbytickets.Category) *CategoryResponseBody {
	if v == nil {
		return nil
	}
	res := &CategoryResponseBody{
		ID:   v.ID,
		Name: v.Name,
	}

	return res
}

// marshalGetbyticketsTicketScoreToTicketScoreResponseBody builds a value of
// type *TicketScoreResponseBody from a value of type *getbytickets.TicketScore.
func marshalGetbyticketsTicketScoreToTicketScoreResponseBody(v *getbytickets.TicketScore) *TicketScoreResponseBody {
	res := &TicketScoreResponseBody{
		TicketID: v.TicketID,
	}
	if v.Categories != nil {
		res.Categories = make([]*CategoryScoreDetailResponseBody, len(v.Categories))
		for i, val := range v.Categories {
			res.Categories[i] = marshalGetbyticketsCategoryScoreDetailToCategoryScoreDetailResponseBody(val)
		}
	}

	return res
}

// marshalGetbyticketsCategoryScoreDetailToCategoryScoreDetailResponseBody
// builds a value of type *CategoryScoreDetailResponseBody from a value of type
// *getbytickets.CategoryScoreDetail.
func marshalGetbyticketsCategoryScoreDetailToCategoryScoreDetailResponseBody(v *getbytickets.CategoryScoreDetail) *CategoryScoreDetailResponseBody {
	if v == nil {
		return nil
	}
	res := &CategoryScoreDetailResponseBody{
		ID:    v.ID,
		Score: v.Score,
	}

	return res
}
