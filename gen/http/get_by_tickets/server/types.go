// Code generated by goa v3.18.2, DO NOT EDIT.
//
// get by tickets HTTP server types
//
// Command:
// $ goa gen go-scores/design

package server

import (
	getbytickets "go-scores/gen/get_by_tickets"
)

// GetAggregatedScoresByTicketResponseBody is the type of the "get by tickets"
// service "getAggregatedScoresByTicket" endpoint HTTP response body.
type GetAggregatedScoresByTicketResponseBody struct {
	Meta *TicketMetaResponseBody    `form:"meta" json:"meta" xml:"meta"`
	Data []*TicketScoreResponseBody `form:"data" json:"data" xml:"data"`
}

// TicketMetaResponseBody is used to define fields on response body types.
type TicketMetaResponseBody struct {
	Categories []*CategoryResponseBody `form:"categories,omitempty" json:"categories,omitempty" xml:"categories,omitempty"`
}

// CategoryResponseBody is used to define fields on response body types.
type CategoryResponseBody struct {
	ID   *int    `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// TicketScoreResponseBody is used to define fields on response body types.
type TicketScoreResponseBody struct {
	TicketID   *int                               `form:"ticket_id,omitempty" json:"ticket_id,omitempty" xml:"ticket_id,omitempty"`
	Categories []*CategoryScoreDetailResponseBody `form:"categories,omitempty" json:"categories,omitempty" xml:"categories,omitempty"`
}

// CategoryScoreDetailResponseBody is used to define fields on response body
// types.
type CategoryScoreDetailResponseBody struct {
	ID    *int     `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Score *float32 `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
}

// NewGetAggregatedScoresByTicketResponseBody builds the HTTP response body
// from the result of the "getAggregatedScoresByTicket" endpoint of the "get by
// tickets" service.
func NewGetAggregatedScoresByTicketResponseBody(res *getbytickets.GetAggregatedScoresByTicketResult) *GetAggregatedScoresByTicketResponseBody {
	body := &GetAggregatedScoresByTicketResponseBody{}
	if res.Meta != nil {
		body.Meta = marshalGetbyticketsTicketMetaToTicketMetaResponseBody(res.Meta)
	}
	if res.Data != nil {
		body.Data = make([]*TicketScoreResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalGetbyticketsTicketScoreToTicketScoreResponseBody(val)
		}
	} else {
		body.Data = []*TicketScoreResponseBody{}
	}
	return body
}

// NewGetAggregatedScoresByTicketPayload builds a get by tickets service
// getAggregatedScoresByTicket endpoint payload.
func NewGetAggregatedScoresByTicketPayload(from string, to string) *getbytickets.GetAggregatedScoresByTicketPayload {
	v := &getbytickets.GetAggregatedScoresByTicketPayload{}
	v.From = from
	v.To = to

	return v
}
