// Code generated by goa v3.18.2, DO NOT EDIT.
//
// get by tickets HTTP client encoders and decoders
//
// Command:
// $ goa gen go-scores/design

package client

import (
	"bytes"
	"context"
	getbytickets "go-scores/gen/get_by_tickets"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetAggregatedScoresByTicketRequest instantiates a HTTP request object
// with method and path set to call the "get by tickets" service
// "getAggregatedScoresByTicket" endpoint
func (c *Client) BuildGetAggregatedScoresByTicketRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		from string
		to   string
	)
	{
		p, ok := v.(*getbytickets.GetAggregatedScoresByTicketPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("get by tickets", "getAggregatedScoresByTicket", "*getbytickets.GetAggregatedScoresByTicketPayload", v)
		}
		from = p.From
		to = p.To
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAggregatedScoresByTicketGetByTicketsPath(from, to)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("get by tickets", "getAggregatedScoresByTicket", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetAggregatedScoresByTicketResponse returns a decoder for responses
// returned by the get by tickets getAggregatedScoresByTicket endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
func DecodeGetAggregatedScoresByTicketResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAggregatedScoresByTicketResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("get by tickets", "getAggregatedScoresByTicket", err)
			}
			err = ValidateGetAggregatedScoresByTicketResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("get by tickets", "getAggregatedScoresByTicket", err)
			}
			res := NewGetAggregatedScoresByTicketResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("get by tickets", "getAggregatedScoresByTicket", resp.StatusCode, string(body))
		}
	}
}

// unmarshalTicketMetaResponseBodyToGetbyticketsTicketMeta builds a value of
// type *getbytickets.TicketMeta from a value of type *TicketMetaResponseBody.
func unmarshalTicketMetaResponseBodyToGetbyticketsTicketMeta(v *TicketMetaResponseBody) *getbytickets.TicketMeta {
	res := &getbytickets.TicketMeta{}
	if v.Categories != nil {
		res.Categories = make([]*getbytickets.Category, len(v.Categories))
		for i, val := range v.Categories {
			res.Categories[i] = unmarshalCategoryResponseBodyToGetbyticketsCategory(val)
		}
	}

	return res
}

// unmarshalCategoryResponseBodyToGetbyticketsCategory builds a value of type
// *getbytickets.Category from a value of type *CategoryResponseBody.
func unmarshalCategoryResponseBodyToGetbyticketsCategory(v *CategoryResponseBody) *getbytickets.Category {
	if v == nil {
		return nil
	}
	res := &getbytickets.Category{
		ID:   v.ID,
		Name: v.Name,
	}

	return res
}

// unmarshalTicketScoreResponseBodyToGetbyticketsTicketScore builds a value of
// type *getbytickets.TicketScore from a value of type *TicketScoreResponseBody.
func unmarshalTicketScoreResponseBodyToGetbyticketsTicketScore(v *TicketScoreResponseBody) *getbytickets.TicketScore {
	res := &getbytickets.TicketScore{
		TicketID: v.TicketID,
	}
	if v.Categories != nil {
		res.Categories = make([]*getbytickets.CategoryScoreDetail, len(v.Categories))
		for i, val := range v.Categories {
			res.Categories[i] = unmarshalCategoryScoreDetailResponseBodyToGetbyticketsCategoryScoreDetail(val)
		}
	}

	return res
}

// unmarshalCategoryScoreDetailResponseBodyToGetbyticketsCategoryScoreDetail
// builds a value of type *getbytickets.CategoryScoreDetail from a value of
// type *CategoryScoreDetailResponseBody.
func unmarshalCategoryScoreDetailResponseBodyToGetbyticketsCategoryScoreDetail(v *CategoryScoreDetailResponseBody) *getbytickets.CategoryScoreDetail {
	if v == nil {
		return nil
	}
	res := &getbytickets.CategoryScoreDetail{
		ID:    v.ID,
		Score: v.Score,
	}

	return res
}
